1. Test for Border-top bouncing
2. Test for Breakout scenario
    - Pong.move_ip(pong_velocity created)
3. Allow streak to be added to score tool       # Done
4. Make size of the paddle smaller to make game harder
5. Find a way to increase the velocity of the ball in a slower way
6. Add a velocity max

Unsuccessful: Create a ball bouncing algorithm to bounce of many different angles
    - https://stackoverflow.com/questions/76687263/pygame-calculate-angle-of-reflection-of-collision-betweeen-masks

Archive: 
1. NOTE: Tuples are immutable unlike lists
2. Understanding the loop sequence and how the game runs
    - pygame.display.flip()
    - pygame.time.delay(20) 
- tile_array[j].append(pygame.draw.rect(screen, COLORS[j], pygame.Rect(
                    x*1 + (i*x*4) + i*space,
                    y*20 + k*x*1.5 + k*space +2*j*x*1.5 + 2*j*space,    // k -> 2 rows with same color // j -> different colors
                    x*4, 
                    y*1.5)))

- use variable borders to easily adjust the value.
        - x = 10, y = 10 // MUST BE AN INTEGER value
        - player = 2
        - Screen = 906, 900
        - Colored tiles (14 x 4)
            - tilespacing = 1px 
            - tile.size() = (4,2)


Interesting things to maybe look at:
    - pygame.sprite 
    - Learn about SurfArray in numpy {3D matrix stuff --> powerful tool for image recognition software and ML training}
        - Imagine a 3D array
            - a 2D screen of pixel by pixel
            - where there is an RGB tuple within the 2D array
    - Training an AI model to play this game by itself and try to win